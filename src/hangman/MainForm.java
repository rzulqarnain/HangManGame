package hangman;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import utilities.FileUtils;

public class MainForm extends javax.swing.JFrame {

    List<String> words;
    GameController game;
    DefaultListModel<Character> modelGuessLetters;
    DefaultListModel<Character> modelBlankLetters;
    String imageFile = "src/images/Hangman-0.png";
    ImageIcon ic = new ImageIcon(imageFile);
    List<Integer> numbers = new ArrayList();

    /**
     * Creates new form HangmanMainForm
     */
    public MainForm() {
        initComponents();
        words = FileUtils.readIntoList("countries.txt");
        Pbar.setStringPainted(true);
        BtnHint.setEnabled(false);
        ListGuessLetters.setEnabled(false);
        txtGuessWord.setEnabled(false);
        ListGuessedLetters.setEnabled(false);
        HMlabel.setIcon(ic);
        modelGuessLetters = new DefaultListModel();
        modelBlankLetters = new DefaultListModel();
        for (int i = 0; i < Constants.ALPHABET.length(); i++) {
            modelGuessLetters.addElement(Constants.ALPHABET.charAt(i));
            modelBlankLetters.addElement(Constants.BLANK);
        }
        ListGuessLetters.setModel(modelGuessLetters);
        ListGuessedLetters.setModel(modelBlankLetters);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        Pbar = new javax.swing.JProgressBar();
        HMlabel = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        btnNewGame = new javax.swing.JButton();
        BtnHint = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        ListGuessLetters = new javax.swing.JList();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        ListGuessedLetters = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtGuessWord = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Hangman");

        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(HMlabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Pbar, javax.swing.GroupLayout.DEFAULT_SIZE, 253, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Pbar, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(HMlabel, javax.swing.GroupLayout.PREFERRED_SIZE, 293, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        btnNewGame.setText("New Game");
        btnNewGame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewGameActionPerformed(evt);
            }
        });

        BtnHint.setText("Hint");
        BtnHint.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BtnHintMouseClicked(evt);
            }
        });
        BtnHint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnHintActionPerformed(evt);
            }
        });

        ListGuessLetters.setFont(new java.awt.Font("Monospaced", 0, 18)); // NOI18N
        ListGuessLetters.setLayoutOrientation(javax.swing.JList.HORIZONTAL_WRAP);
        ListGuessLetters.setVisibleRowCount(2);
        ListGuessLetters.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ListGuessLettersMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(ListGuessLetters);

        jLabel2.setText("Letters Used");

        ListGuessedLetters.setFont(new java.awt.Font("Monospaced", 0, 18)); // NOI18N
        ListGuessedLetters.setLayoutOrientation(javax.swing.JList.HORIZONTAL_WRAP);
        ListGuessedLetters.setVisibleRowCount(2);
        jScrollPane3.setViewportView(ListGuessedLetters);

        txtGuessWord.setColumns(20);
        txtGuessWord.setFont(new java.awt.Font("Monospaced", 0, 18)); // NOI18N
        txtGuessWord.setRows(3);
        jScrollPane2.setViewportView(txtGuessWord);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(btnNewGame)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(BtnHint))
                    .addComponent(jScrollPane3)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 335, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnNewGame)
                    .addComponent(BtnHint))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnNewGameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewGameActionPerformed

        BtnHint.setEnabled(true);
        ListGuessLetters.setEnabled(true);
        txtGuessWord.setEnabled(true);
        Pbar.setValue(100);
        Pbar.setString(String.valueOf(Constants.MAX_GUESSES) + " guesses left");
        String word = chooseRandomWord();
        game = new GameController(word);
        String populate = game.getGuessSpaced();
        txtGuessWord.setText("\n" + populate + "\n");
        String imgFile = "src/images/Hangman-0.png";
        ImageIcon newgamepic = new ImageIcon(imgFile);
        HMlabel.setIcon(newgamepic);
        System.out.println(game.getWord());
        reset();


    }//GEN-LAST:event_btnNewGameActionPerformed

    private void reset() {
        modelGuessLetters = new DefaultListModel();
        modelBlankLetters = new DefaultListModel();
        for (int i = 0; i < Constants.ALPHABET.length(); i++) {
            modelGuessLetters.addElement(Constants.ALPHABET.charAt(i));
            modelBlankLetters.addElement(Constants.BLANK);
        }
        ListGuessLetters.setModel(modelGuessLetters);
        ListGuessedLetters.setModel(modelBlankLetters);

    }

    private void ListGuessLettersMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ListGuessLettersMouseClicked

        if (evt.getClickCount() == 2 && ListGuessLetters.isEnabled()) {
            int pos = ListGuessLetters.getSelectedIndex();
            char guess = modelGuessLetters.get(pos);
            if (guess != Constants.BLANK) {


                modelGuessLetters.set(pos, Constants.BLANK);
                modelBlankLetters.set(pos, guess);
                game.processLetter(guess);
                txtGuessWord.setText("\n" + game.getGuessSpaced() + "\n");
                int progressbar = (game.getChancesRemaining() * 100 / Constants.MAX_GUESSES);
                Pbar.setValue(progressbar);
                Pbar.setString("Guesses Left: " + game.getChancesRemaining());
                imageFile = "src/images/Hangman-" + (Constants.MAX_GUESSES - game.getChancesRemaining()) + ".png";
                ic = new ImageIcon(imageFile);
                HMlabel.setIcon(ic);
                int status = game.checkGameStatus();
                if (status == Constants.GAME_OVER_WIN) {
                    JOptionPane.showMessageDialog(this, "Congratulations You Win!", "", JOptionPane.INFORMATION_MESSAGE);
                    ListGuessLetters.setEnabled(false);
                    BtnHint.setEnabled(false);

                }
                if (status == Constants.GAME_OVER_LOSE) {
                    JOptionPane.showMessageDialog(this, "Sorry You Loose", "", JOptionPane.ERROR_MESSAGE);
                    ListGuessLetters.setEnabled(false);
                    System.out.println(game.getWord());
                    BtnHint.setEnabled(false);
                }
            }
        }
    }//GEN-LAST:event_ListGuessLettersMouseClicked

    private void BtnHintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnHintActionPerformed
//        String word = game.getWord();
//        String guess = game.getGuess();
//
//        for(int i = 0 ; i < word.length() ; i++){
//            if(guess.charAt(i) == Constants.BLANK){
//                game.processLetter(word.charAt(i));
//                break;
//            }
//        }
//        txtGuessWord.setText("\n"+game.getGuessSpaced() + "\n");
//        int status = game.checkGameStatus();
//                if(status == Constants.GAME_OVER_WIN){
//                    JOptionPane.showMessageDialog(this, "Congratulations You Win!", "", JOptionPane.INFORMATION_MESSAGE);
//                    ListGuessLetters.setEnabled(false);
//                    System.out.println(game.getWord());
//                }
    }//GEN-LAST:event_BtnHintActionPerformed

    private void BtnHintMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BtnHintMouseClicked
        String word = game.getWord();
        String guess = game.getGuess();


        for (int i = 0; i < guess.length(); i++) {
            if (guess.charAt(i) == Constants.BLANK) {
                char hintLetter = word.charAt(i);
                game.processLetter(hintLetter);
                for (int j = 0; j < Constants.ALPHABET.length(); j++) {
                    char temp = Constants.ALPHABET.charAt(j);
                    if(hintLetter == temp){
                        modelGuessLetters.set(j, Constants.BLANK);
                        modelBlankLetters.set(j , hintLetter);
                        break;
                    }
                }
                break;
            }
        }
        txtGuessWord.setText("\n" + game.getGuessSpaced() + "\n");
        int status = game.checkGameStatus();
        if (status == Constants.GAME_OVER_WIN) {
            JOptionPane.showMessageDialog(this, "Congratulations You Win!", "", JOptionPane.INFORMATION_MESSAGE);
            ListGuessLetters.setEnabled(false);
            BtnHint.setEnabled(false);
        }
//        Random rand = new Random();
//        int random = rand.nextInt(game.getWord().length()) + 0;
//        int selectednumber = -1;
//        for (;;) {
//            if (!numbers.contains(random)) {
//                numbers.add(random);
//                selectednumber = random;
//                break;
//            } else if (numbers.size() >= game.getWord().length()) {
//                break;
//            } else {
//                random = rand.nextInt(game.getWord().length()) + 0;
//            }
//        }
//        char guess = game.getWord().charAt(random);
//        int toset = modelGuessLetters.indexOf(guess);
//        System.out.println(modelGuessLetters.get(toset));
//        if (selectednumber != -1 && modelGuessLetters.get(toset) != Constants.BLANK) {
//            System.out.println(selectednumber);           
//            modelGuessLetters.set(toset, Constants.BLANK);
//            modelBlankLetters.set(toset, guess);
//            game.processLetter(guess);
//            txtGuessWord.setText(game.getGuessSpaced());
//        } else {
//            for (;;) {
//                if (!numbers.contains(random)) {
//                    numbers.add(random);
//                    selectednumber = random;
//                    break;
//                } else if (numbers.size() >= game.getWord().length()) {
//                    break;
//                } else {
//                    random = rand.nextInt(game.getWord().length()) + 0;
//                }
//            }
//        }
//        int status = game.checkGameStatus();
//        if (status == Constants.GAME_OVER_WIN) {
//            JOptionPane.showMessageDialog(this, "Congratulations You Win!", "", JOptionPane.INFORMATION_MESSAGE);
//            ListGuessLetters.setEnabled(false);
//        }

    }//GEN-LAST:event_BtnHintMouseClicked

    private String chooseRandomWord() {
        Random rand = new Random();
        int pos = rand.nextInt(words.size());
        return words.get(pos).toUpperCase();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainForm().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BtnHint;
    private javax.swing.JLabel HMlabel;
    private javax.swing.JList ListGuessLetters;
    private javax.swing.JList ListGuessedLetters;
    private javax.swing.JProgressBar Pbar;
    private javax.swing.JButton btnNewGame;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea txtGuessWord;
    // End of variables declaration//GEN-END:variables
}
